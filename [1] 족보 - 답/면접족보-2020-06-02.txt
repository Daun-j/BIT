1. 다음을 프로그램 하시오.
interface Printable { // MS가 정의하고 제공한 인터페이스
   public void print(String doc);
}
 SPrinterDriver 와 LPrinterDriver를 만드시오
======================

public static void main(String[] args) {
   String myDoc = "This is a report about...";
   
   // 삼성 프린터로 출력
   Printable prn = new SPrinterDriver();
   prn.print(myDoc);
   System.out.println();

   // LG 프린터로 출력
   prn = new LPrinterDriver();
   prn.print(myDoc);
}
======console====
From Samsung printer
This is a report about...

From LG printer
This is a report about...

[ Test.java ]
interface Printable { // MS가 정의하고 제공한 인터페이스
	public void print(String doc);
}

class SPrinterDriver implements Printable {
	@Override
	public void print(String doc) {
		System.out.println("From Samsung printer");
		System.out.println(doc);
	}
}

class LPrinterDriver implements Printable {
	@Override
	public void print(String doc) {
		System.out.println("From LG printer");
		System.out.println(doc);
	}
}

public class Test {	

	public static void main(String[] args) {

		String myDoc = "This is a report about...";

		// 삼성 프린터로 출력
		Printable prn = new SPrinterDriver();
		prn.print(myDoc);
		System.out.println();

		// LG 프린터로 출력
		prn = new LPrinterDriver();
		prn.print(myDoc);
	}

}

2. interface 문법중 default 에 대하여 설명하시오.

P.372 - 윤성우의 열혈 Java 프로그래밍 챕터 17. 인터페이스와 추상 클래스
[ 인터페이스의 디폴트 메소드 ]
이미 정의되어 다양한 프로젝트에 사용 중인 수십 개의 인터페이스가 있는데,
대대적인 기능 보강을 위해 모든 인터페이스에 최소 한개 이상의 추상 메소드를 추가해야 하는 상황이 발생 할 수 있다.
이 상황의 문제를 '인터페이스의 상속'으로 해결하게 되면, 인터페이스의 수는 두배로 늘어나게 된다.
그리고 이렇듯 인터페이스의 수가 늘어나는 것은 그 자체로 프로그램 개발에 불편을 초래하는 일이다.
그래서 이러한 상황을 해결을 위해 인터페이스의 '디폴트 메소드(Default Method)'라는 것이 자바 8에서 소개 되었다.

[ 인터페이스 - 함수 정해주기 ] 
interface Printable{
	void print(String doc);		// 추상 메소드( abstract method )
	default void printCMYK(String doc){ }	// 디폴트 메소드 ( default method )
}

디폴트 메소드의 특징은 다음과 같다.
- 자체로 완전한 메소드이다. (비록 인터페이스 내에 정의되어 있지만)
- 따라서 이를 구현하는 클래스가 오버라이딩 하지 않아도 된다.

그리고 위의 Printable 인터페이스를 보았을 때 다음과 같이 이해할 수 있어야 한다.
 "처음에는 Printable 인터페이스에 print 추상 메소드만 있었구나."
 "이후에 필요에 따라 printCMTK 메소드를 추가 하였구나."
 "그래도 디폴트 메소드로 추가하였으니, 이전에 구현된 드라이버에는 영향을 주지 않는구나."

[ 인터페이스 - 정해준 함수 구현 ]
class LGPrint implements Printable{
	@Override
	public void print(String doc){
		System.out.println("From LGprinter");	
		System.out.println(doc);
	}
}


[ PrintDriver4.java ] 
// 열혈 자바 P.372 - P.374  +설명추가
interface Printable{
	void print(String doc);		// ① 추상 메소드( abstract method )
	// BODY가 없음. 자식이 꼭 구현해야함. 앞에 abstract 생략가능.  ★ 강제 ★

	default void printCMYK(String doc){ }	// ② 디폴트 메소드 ( default method )
	// BODY가 비어있긴하지만 있음. 자식이 반드시 구현하지 않아도됨.	★ 선택 ★
}


// Printable 인터페이스를 구현 받는(?) LGPrint Class는 ① 추상메소드만 오버라이딩 했다. 
class LGPrint implements Printable{									// 영단어 : implements - 구현하다
	@Override
	public void print(String doc){			// ① 추상 메소드 오버라이딩
		System.out.println("From LG printer");	
		System.out.println(doc);
	}
}

// Printable 인터페이스를 구현 받는(?) SamsungPrint Class는 ①추상메소드와 ②디폴트 메소드를 오버라이딩 했다.
class SamsungPrint implements Printable{
	@Override
	public void print(String doc){			// ① 추상 메소드 오버라이딩
		System.out.println("From Samsung printer");	
		System.out.println(doc);
	}
	
	@Override
	public void printCMYK(String doc) {			// ② 디폴트 메소드 오버라이딩
		System.out.println("Merong");
	}
	
} 

이렇듯 디폴트 메소드는 인터페이스에 추상 메소드를 추가해야 하는 상황에서, 이전에 개발해 놓은 코드에 영향을 미치지 않기 위해 등장한 문법이다.


3.abstract 클래스에 대하여 설명하시오.
p.380 - 윤성우의 열혈 Java 프로그래밍 챕터 17. 인터페이스와 추상 클래스
[ 추상 클래스 : Abstract Class ]

4.추상클래스와 interface의 차이는 무엇인가요?
/* interface의 장점
 * - 표준,강제 
 * - 개발속도
 */

/* interface VS 추상 클래스(abstract)
 * 언제 interface? 추상 클래스? 
 * class 는 데이터(변수,상수)와 기능(함수)로 구성
 * 
 * 인터페이스는 상수,추상메소드로 구성
 * 인터페이스 의 목적은 객체 생성이 아닌, 자식들이게 주는 것이 목적
 * 
 * 추상 클래스는 일반 변수를 가지고, 클래스를 구성하기위해, 자식들도 쓰고
 * 추상 클래스의 목적은 일반 클래스
 */

// 1. 인터페이스
interface ICircle {
	public abstract void getArea(int radius); // 호출하는 쪽은 24-33까지 알필요가 없음. getArea만, 선언부만 알면된다.
}
// 2. 추상클래스
abstract class Circle {			 // 24
	int radius = 1;
	final static double PI = 3.14;

	void yammy() {
		System.out.println(radius);
	}

	public abstract void getArea();
}					 // 33


5.조별학습-가즈아 ~~


