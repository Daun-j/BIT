1.아래의 메모리를 정확히 그리시오.
		Rectangle[] recArr = new Rectangle[3];
		Scanner scanner= null;
		
		for(int i=0;i<3;i++) {
			scanner = new Scanner(System.in);
			int width = scanner.nextInt();
			int height = scanner.nextInt();
			recArr[i] = new Rectangle(width, height);
		}
		
		
		Rectangle maxRec = Rectangle.getMaxRec(recArr);

=======================
public static Rectangle getMaxRec(Rectangle[] recArr) {
		Rectangle maxRec = recArr[0];
		
		for(Rectangle rec: recArr) {			
			if(maxRec.getArea() < rec.getArea()) {
				maxRec = rec;
			}		
		}
		
		for(int i=0 ; i <recArr.length; i++) {			
			if(maxRec.getArea() < recArr[i].getArea()) {
				maxRec = recArr[i];
			}		
		}		
		return maxRec;		
	}
 
2. 예외와 에러의 다른점은?

3. 예외에 대한 클래스 상속도를 간단하게 그리시오.

keyword : 자바 에외처리
title : Java 예외(Exception) 처리에 대한 작은 생각
http://www.nextree.co.kr/p3239/

4.예전의 계산기 프로그램이 아래와 같이 에러가 난다. 예외처리를 구문을 적용하여, 죽지 않게 만드시오.

첫번째 숫자를 넣으세요:1
연산기호를 넣으세요:/
두번째 숫자를 넣으세요:3
1 / 3 = 0
continue? Y or N:y
첫번째 숫자를 넣으세요:1
연산기호를 넣으세요:/
두번째 숫자를 넣으세요:0
Exception in thread "main" java.lang.ArithmeticException: / by zero
	at Calculator.execute(Calculator.java:34)
	at CalculatorTest.main(CalculatorTest.java:69)

☆변경전
[ Calculator.java ]
import java.util.Scanner;

public class Calculator {

	public static int add(int num1, int num2) {
		return num1 + num2;
	}

	public static int min(int num1, int num2) {
		return num1 - num2;
	}

	public static int mul(int num1, int num2) {
		return num1 * num2;
	}

	public static int div(int num1, int num2) {
		return num1 / num2;
	}

	void execute() {
		int num1, num2, result = 0;
		String op;
		char yn;

		do {

			Scanner sc = new Scanner(System.in);

			System.out.print("첫번째 숫자를 넣으세요:");
			num1 = sc.nextInt();

			System.out.print("연산 기호를 넣으세요:");
			op = sc.next();

			System.out.print("두번째 숫자를 넣으세요:");
			num2 = sc.nextInt();

			switch (op) {
			case "+":
				result = add(num1, num2);
				break;
			case "-":
				result = min(num1, num2);
				break;
			case "*":
				result = mul(num1, num2);
				break;
			case "/":
				result = div(num1, num2);
				break;
			default:
				break;
			}

			System.out.println(result);
			System.out.print("continue? Y or N:");
			yn = sc.next().charAt(0);
			if ((yn == 'n') || (yn == 'N')) {
				System.out.println("종료");
				break;
			}
		} while ((yn == 'y') || (yn == 'Y'));
	}
}

[ CalculatorTest.java ]
public class CalculatorTest {

	public static void main(String[] args) {
		
		Calculator cal = new Calculator();
		cal.execute();

	}

}

★ 변경후
[ Calculator.java ]
import java.util.Scanner;

public class Calculator {

	public static int add(int num1, int num2) {
		return num1 + num2;
	}

	public static int min(int num1, int num2) {
		return num1 - num2;
	}

	public static int mul(int num1, int num2) {
		return num1 * num2;
	}

	public static int div(int num1, int num2) {
		return num1 / num2;
	}

	void execute() {
		int num1, num2, result = 0;
		String op;
		char yn;

		do {
			Scanner sc = new Scanner(System.in);
			try {			// ☜

				System.out.print("첫번째 숫자를 넣으세요:");
				num1 = sc.nextInt();

				System.out.print("연산 기호를 넣으세요:");
				op = sc.next();

				System.out.print("두번째 숫자를 넣으세요:");
				num2 = sc.nextInt();

				switch (op) {
				case "+":
					result = add(num1, num2);
					break;
				case "-":
					result = min(num1, num2);
					break;
				case "*":
					result = mul(num1, num2);
					break;
				case "/":
					result = div(num1, num2);
					break;
				default:
					break;
				}

				System.out.println(result);
			} catch (ArithmeticException e) {	// ☜
				System.out.println(e.getMessage());
			}				// ☜	
			System.out.print("continue? Y or N:");
			yn = sc.next().charAt(0);
			if ((yn == 'n') || (yn == 'N')) {
				System.out.println("종료");
				break;
			}
		} while ((yn == 'y') || (yn == 'Y'));

	}
}

==console==
첫번째 숫자를 넣으세요:1
연산 기호를 넣으세요:/
두번째 숫자를 넣으세요:0
/ by zero
continue? Y or N:y
첫번째 숫자를 넣으세요:2
연산 기호를 넣으세요:/
두번째 숫자를 넣으세요:0
/ by zero

5.예외처리 에서, 아래의 용어를 설명하시오.
-checked Excetpion이란 unchecked Exception이란?
-finally
-throws